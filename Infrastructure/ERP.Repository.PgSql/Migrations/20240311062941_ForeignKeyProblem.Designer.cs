// <auto-generated />
using System;
using ERP.Repository.PgSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ERP.Repository.PgSql.Migrations
{
    [DbContext(typeof(PgSqlDbContext))]
    [Migration("20240311062941_ForeignKeyProblem")]
    partial class ForeignKeyProblem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.GraduatesEntity.Graduate", b =>
                {
                    b.Property<int>("GraduateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GraduateID"));

                    b.Property<string>("GraduateCompany")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GraduateContactNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GraduateDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GraduateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GraduateID");

                    b.ToTable("Graduates");

                    b.HasData(
                        new
                        {
                            GraduateID = 1001,
                            GraduateCompany = "737 Schinner Islands, Angelport, Thailand",
                            GraduateContactNo = "301-365-7145 x974",
                            GraduateDescription = "Direct",
                            GraduateName = "Dustin"
                        },
                        new
                        {
                            GraduateID = 1002,
                            GraduateCompany = "10893 Osborne Fort, Tremblaymouth, Lao People's Democratic Republic",
                            GraduateContactNo = "(475) 210-2510",
                            GraduateDescription = "Principal",
                            GraduateName = "Pearl"
                        },
                        new
                        {
                            GraduateID = 1003,
                            GraduateCompany = "81390 Kailey Ports, Port Joshuahmouth, Tunisia",
                            GraduateContactNo = "1-229-693-9221",
                            GraduateDescription = "International",
                            GraduateName = "Buster"
                        });
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.LabEntity.LabEquipment", b =>
                {
                    b.Property<int>("LabEquipmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabEquipmentID"));

                    b.Property<bool>("Avaialability")
                        .HasColumnType("boolean");

                    b.Property<string>("LabEquipmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LabSpaceId")
                        .HasColumnType("integer");

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LabEquipmentID");

                    b.HasIndex("LabSpaceId");

                    b.ToTable("LabEquipments");

                    b.HasData(
                        new
                        {
                            LabEquipmentID = 3001,
                            Avaialability = false,
                            LabEquipmentName = "Xander",
                            LabSpaceId = 21,
                            condition = "bad"
                        },
                        new
                        {
                            LabEquipmentID = 3002,
                            Avaialability = false,
                            LabEquipmentName = "Guido",
                            LabSpaceId = 21,
                            condition = "medium"
                        },
                        new
                        {
                            LabEquipmentID = 3003,
                            Avaialability = false,
                            LabEquipmentName = "Carole",
                            LabSpaceId = 21,
                            condition = "medium"
                        });
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.LabEntity.LabSpace", b =>
                {
                    b.Property<int>("LabSpaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabSpaceId"));

                    b.Property<string>("LabSpaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LabSpaceId");

                    b.ToTable("LabSpaces");

                    b.HasData(
                        new
                        {
                            LabSpaceId = 21,
                            LabSpaceName = "Douglas"
                        },
                        new
                        {
                            LabSpaceId = 22,
                            LabSpaceName = "Gage"
                        },
                        new
                        {
                            LabSpaceId = 23,
                            LabSpaceName = "Rodolfo"
                        });
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.RecruimentApplication", b =>
                {
                    b.Property<int>("RecruimentJobPostId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CvFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("submissionDate")
                        .HasColumnType("date");

                    b.HasKey("RecruimentJobPostId");

                    b.HasIndex("PersonId");

                    b.ToTable("RecruimentApplication");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.RecruimentJobPost", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QualificationsRequired")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JobId");

                    b.ToTable("RecruimentJobs");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.TrainingEntity.InternShips.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.TrainingEntity.InternShips.JobPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("InternPosition")
                        .HasColumnType("text");

                    b.Property<string>("JobDescriptionLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Category = "computer Engineering",
                            CompanyEmail = "FritschandSons.Kilback@yahoo.com",
                            CompanyName = "Fritsch and Sons",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://eldridge.name"
                        },
                        new
                        {
                            Id = 102,
                            Category = "computer Engineering",
                            CompanyEmail = "LabadieWeissnatandPadberg71@yahoo.com",
                            CompanyName = "Labadie, Weissnat and Padberg",
                            InternPosition = "quality assurance Enginner",
                            JobDescriptionLink = "https://brendan.org"
                        },
                        new
                        {
                            Id = 103,
                            Category = "computer Engineering",
                            CompanyEmail = "AnkundingWardandBuckridge.Cummerata@yahoo.com",
                            CompanyName = "Ankunding, Ward and Buckridge",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://ole.name"
                        },
                        new
                        {
                            Id = 104,
                            Category = "computer Engineering",
                            CompanyEmail = "SmithamVeumandHoeger90@yahoo.com",
                            CompanyName = "Smitham, Veum and Hoeger",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "http://virgie.info"
                        },
                        new
                        {
                            Id = 105,
                            Category = "computer Engineering",
                            CompanyEmail = "ConnellyParkerandFay.Thompson22@gmail.com",
                            CompanyName = "Connelly, Parker and Fay",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "https://erling.biz"
                        },
                        new
                        {
                            Id = 106,
                            Category = "computer Engineering",
                            CompanyEmail = "LynchGroup_Kiehn37@yahoo.com",
                            CompanyName = "Lynch Group",
                            InternPosition = "cyber security engineer",
                            JobDescriptionLink = "https://tony.biz"
                        },
                        new
                        {
                            Id = 107,
                            Category = "computer Engineering",
                            CompanyEmail = "LangGroup_Altenwerth@yahoo.com",
                            CompanyName = "Lang Group",
                            InternPosition = "cyber security engineer",
                            JobDescriptionLink = "http://khalid.name"
                        },
                        new
                        {
                            Id = 108,
                            Category = "computer Engineering",
                            CompanyEmail = "Howe-Rempel95@gmail.com",
                            CompanyName = "Howe - Rempel",
                            InternPosition = "quality assurance Enginner",
                            JobDescriptionLink = "https://nicklaus.com"
                        },
                        new
                        {
                            Id = 109,
                            Category = "computer Engineering",
                            CompanyEmail = "Herzog-Keeling.Collins@yahoo.com",
                            CompanyName = "Herzog - Keeling",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://victor.info"
                        },
                        new
                        {
                            Id = 110,
                            Category = "computer Engineering",
                            CompanyEmail = "SpencerGreenholtandTurcotte14@yahoo.com",
                            CompanyName = "Spencer, Greenholt and Turcotte",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "http://pearlie.org"
                        },
                        new
                        {
                            Id = 111,
                            Category = "computer Engineering",
                            CompanyEmail = "BlickHaleyandBeer_Upton3@gmail.com",
                            CompanyName = "Blick, Haley and Beer",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://jazmyne.info"
                        },
                        new
                        {
                            Id = 112,
                            Category = "computer Engineering",
                            CompanyEmail = "Schamberger-Collins75@yahoo.com",
                            CompanyName = "Schamberger - Collins",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "https://akeem.org"
                        },
                        new
                        {
                            Id = 113,
                            Category = "computer Engineering",
                            CompanyEmail = "Bode-Prosacco_Rempel@gmail.com",
                            CompanyName = "Bode - Prosacco",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://freeman.org"
                        },
                        new
                        {
                            Id = 114,
                            Category = "computer Engineering",
                            CompanyEmail = "Runte-Schultz94@yahoo.com",
                            CompanyName = "Runte - Schultz",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "https://luis.net"
                        },
                        new
                        {
                            Id = 115,
                            Category = "computer Engineering",
                            CompanyEmail = "Kilback-Parker4@yahoo.com",
                            CompanyName = "Kilback - Parker",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "https://brielle.info"
                        },
                        new
                        {
                            Id = 116,
                            Category = "computer Engineering",
                            CompanyEmail = "HettingerCollinsandProsacco_Sauer8@gmail.com",
                            CompanyName = "Hettinger, Collins and Prosacco",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://verlie.name"
                        },
                        new
                        {
                            Id = 117,
                            Category = "computer Engineering",
                            CompanyEmail = "Hammes-Cummings78@yahoo.com",
                            CompanyName = "Hammes - Cummings",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://noemie.name"
                        },
                        new
                        {
                            Id = 118,
                            Category = "computer Engineering",
                            CompanyEmail = "BoyleKautzerandDoyle_Lind@hotmail.com",
                            CompanyName = "Boyle, Kautzer and Doyle",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://malcolm.name"
                        },
                        new
                        {
                            Id = 119,
                            Category = "computer Engineering",
                            CompanyEmail = "BergstromDeckowandJaskolski94@gmail.com",
                            CompanyName = "Bergstrom, Deckow and Jaskolski",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "https://sibyl.biz"
                        },
                        new
                        {
                            Id = 120,
                            Category = "computer Engineering",
                            CompanyEmail = "ProhaskaSchusterandOrn_Tillman@hotmail.com",
                            CompanyName = "Prohaska, Schuster and Orn",
                            InternPosition = "quality assurance Enginner",
                            JobDescriptionLink = "https://tremaine.net"
                        },
                        new
                        {
                            Id = 121,
                            Category = "computer Engineering",
                            CompanyEmail = "Bernhard-Wunsch.Nolan@hotmail.com",
                            CompanyName = "Bernhard - Wunsch",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "https://camryn.name"
                        },
                        new
                        {
                            Id = 122,
                            Category = "computer Engineering",
                            CompanyEmail = "HoppeSchmidtandMurphy_Osinski@yahoo.com",
                            CompanyName = "Hoppe, Schmidt and Murphy",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "http://jamie.info"
                        },
                        new
                        {
                            Id = 123,
                            Category = "computer Engineering",
                            CompanyEmail = "Denesik-Kling11@yahoo.com",
                            CompanyName = "Denesik - Kling",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://mitchell.net"
                        },
                        new
                        {
                            Id = 124,
                            Category = "computer Engineering",
                            CompanyEmail = "AbernathyGroup.Baumbach@gmail.com",
                            CompanyName = "Abernathy Group",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://estel.net"
                        },
                        new
                        {
                            Id = 125,
                            Category = "computer Engineering",
                            CompanyEmail = "BartolettiInc.Champlin@gmail.com",
                            CompanyName = "Bartoletti Inc",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "http://jadon.org"
                        },
                        new
                        {
                            Id = 126,
                            Category = "computer Engineering",
                            CompanyEmail = "BraunKautzerandMaggio_Gerhold@hotmail.com",
                            CompanyName = "Braun, Kautzer and Maggio",
                            InternPosition = "data engineer",
                            JobDescriptionLink = "http://rylee.biz"
                        },
                        new
                        {
                            Id = 127,
                            Category = "computer Engineering",
                            CompanyEmail = "RempelRippinandRosenbaum.Kuhic@yahoo.com",
                            CompanyName = "Rempel, Rippin and Rosenbaum",
                            InternPosition = "cyber security engineer",
                            JobDescriptionLink = "http://torrance.net"
                        },
                        new
                        {
                            Id = 128,
                            Category = "computer Engineering",
                            CompanyEmail = "Bednar-Trantow_Quitzon@gmail.com",
                            CompanyName = "Bednar - Trantow",
                            InternPosition = "computer networks engineer",
                            JobDescriptionLink = "http://janessa.com"
                        },
                        new
                        {
                            Id = 129,
                            Category = "computer Engineering",
                            CompanyEmail = "RauLLC.Swaniawski@yahoo.com",
                            CompanyName = "Rau LLC",
                            InternPosition = "software engineer",
                            JobDescriptionLink = "https://bryce.net"
                        },
                        new
                        {
                            Id = 130,
                            Category = "computer Engineering",
                            CompanyEmail = "WolffInc28@gmail.com",
                            CompanyName = "Wolff Inc",
                            InternPosition = "cyber security engineer",
                            JobDescriptionLink = "https://verner.info"
                        });
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.TrainingEntity.StudentRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RequestId"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanySendersDesignation")
                        .HasColumnType("text");

                    b.Property<string>("CompanySendersName")
                        .HasColumnType("text");

                    b.Property<bool>("IsResponsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("RequestId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRequests");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.WorkLoadEntity.WorkingTask", b =>
                {
                    b.Property<int>("WorkingTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkingTaskId"));

                    b.Property<bool>("Assign")
                        .HasColumnType("boolean");

                    b.Property<string>("Decription")
                        .HasColumnType("text");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<double>("TimeAllocated")
                        .HasColumnType("double precision");

                    b.HasKey("WorkingTaskId");

                    b.HasIndex("TeacherId");

                    b.ToTable("WorkingTasks");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BatchId"));

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("BatchId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Curriculum", b =>
                {
                    b.Property<int>("CurriculumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurriculumId"));

                    b.Property<int?>("DegreeId")
                        .HasColumnType("integer");

                    b.HasKey("CurriculumId");

                    b.HasIndex("DegreeId");

                    b.ToTable("Curriculum");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DegreeId"));

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Evaluation", b =>
                {
                    b.Property<int>("EvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaluationId"));

                    b.Property<double>("FinalMarks")
                        .HasColumnType("double precision");

                    b.Property<double>("Marks")
                        .HasColumnType("double precision");

                    b.Property<int?>("ModuleOfferingId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("EvaluationId");

                    b.HasIndex("ModuleOfferingId");

                    b.ToTable("Evaluation");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<int?>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ModuleId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", b =>
                {
                    b.Property<int>("ModuleOfferingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleOfferingId"));

                    b.Property<int>("CoordinatorTeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalModeratorTeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("ModeratorTeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleOfferingId");

                    b.HasIndex("CoordinatorTeacherId");

                    b.HasIndex("ExternalModeratorTeacherId");

                    b.HasIndex("ModeratorTeacherId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ModuleOffering");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingFirstExaminer", b =>
                {
                    b.Property<int>("ModuleOfferingId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleOfferingId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ModuleFirstExaminers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingSecondExaminer", b =>
                {
                    b.Property<int>("ModuleOfferingId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleOfferingId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ModuleSecondExaminers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingTeacher", b =>
                {
                    b.Property<int>("ModuleOfferingId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleOfferingId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ModuleTeachers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleRegistration", b =>
                {
                    b.Property<int>("ModuleRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleRegistrationId"));

                    b.Property<int>("ModuleOfferingId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleRegistrationId");

                    b.HasIndex("ModuleOfferingId");

                    b.HasIndex("StudentId");

                    b.ToTable("ModuleRegistration");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SemesterId"));

                    b.Property<int>("BatchId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecializationDegreeId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("SemesterId");

                    b.HasIndex("BatchId");

                    b.HasIndex("SpecializationDegreeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("integer");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("GPA")
                        .HasColumnType("double precision");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StudentId");

                    b.HasIndex("DegreeId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1001,
                            Address1 = "",
                            Address2 = "",
                            City = "",
                            District = "",
                            DoB = new DateOnly(1, 1, 1),
                            Email = "Isabella_Hammes@hotmail.com",
                            FirstName = "Isabella",
                            GPA = 0.0,
                            LastName = "Hammes",
                            NationalID = "",
                            Phone = "",
                            PhoneNumber = "",
                            RegistrationNum = "EG/2023/7779"
                        },
                        new
                        {
                            StudentId = 1002,
                            Address1 = "",
                            Address2 = "",
                            City = "",
                            District = "",
                            DoB = new DateOnly(1, 1, 1),
                            Email = "Janiya98@gmail.com",
                            FirstName = "Janiya",
                            GPA = 0.0,
                            LastName = "Auer",
                            NationalID = "",
                            Phone = "",
                            PhoneNumber = "",
                            RegistrationNum = "EG/2021/4303"
                        },
                        new
                        {
                            StudentId = 1003,
                            Address1 = "",
                            Address2 = "",
                            City = "",
                            District = "",
                            DoB = new DateOnly(1, 1, 1),
                            Email = "Keaton.Barton@gmail.com",
                            FirstName = "Keaton",
                            GPA = 0.0,
                            LastName = "Barton",
                            NationalID = "",
                            Phone = "",
                            PhoneNumber = "",
                            RegistrationNum = "EG/2021/5228"
                        });
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.StudentResult", b =>
                {
                    b.Property<int>("StudentResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentResultId"));

                    b.Property<int?>("EvaluationId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<double>("StudentScore")
                        .HasColumnType("double precision");

                    b.HasKey("StudentResultId");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentResult");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.LabEntity.LabEquipment", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.DepartmentEntity.LabEntity.LabSpace", "LabSpace")
                        .WithMany("labEquipments")
                        .HasForeignKey("LabSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabSpace");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.Notification", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Person", "Person")
                        .WithMany("Notifications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.RecruimentApplication", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Person", "Person")
                        .WithMany("RecruimentsApplications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.RecruimentJobPost", "RecruimentJobPost")
                        .WithMany("recruimentApplications")
                        .HasForeignKey("RecruimentJobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RecruimentJobPost");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.TrainingEntity.StudentRequest", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Student", "Student")
                        .WithMany("StudentRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.WorkLoadEntity.WorkingTask", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Teacher")
                        .WithMany("WorkingTasks")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Curriculum", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Degree", null)
                        .WithMany("Curricula")
                        .HasForeignKey("DegreeId");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Degree", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Evaluation", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", null)
                        .WithMany("Evalutions")
                        .HasForeignKey("ModuleOfferingId");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Module", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Curriculum", null)
                        .WithMany("Modules")
                        .HasForeignKey("CurriculumId");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Coordinator")
                        .WithMany("CordinatingModules")
                        .HasForeignKey("CoordinatorTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "ExternalModerator")
                        .WithMany()
                        .HasForeignKey("ExternalModeratorTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Semester", "Semester")
                        .WithMany("Modules")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordinator");

                    b.Navigation("ExternalModerator");

                    b.Navigation("Moderator");

                    b.Navigation("Module");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingFirstExaminer", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", "ModuleOffering")
                        .WithMany("FirstExaminers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Teacher")
                        .WithMany("FirstExaminersModules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleOffering");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingSecondExaminer", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", "ModuleOffering")
                        .WithMany("SecondExaminers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Teacher")
                        .WithMany("SecondExaminersModules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleOffering");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOfferingTeacher", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", "ModuleOffering")
                        .WithMany("Teachers")
                        .HasForeignKey("ModuleOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Teacher", "Teacher")
                        .WithMany("TeachingModules")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleOffering");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleRegistration", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", "Module")
                        .WithMany("Registrations")
                        .HasForeignKey("ModuleOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Semester", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Degree", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationDegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Student", null)
                        .WithMany("Semesters")
                        .HasForeignKey("StudentId");

                    b.Navigation("Batch");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Student", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Degree", "Degree")
                        .WithMany()
                        .HasForeignKey("DegreeId");

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.StudentResult", b =>
                {
                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Evaluation", null)
                        .WithMany("Results")
                        .HasForeignKey("EvaluationId");

                    b.HasOne("ERP.Domain.Core.Entity.StudentEntity.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.LabEntity.LabSpace", b =>
                {
                    b.Navigation("labEquipments");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.DepartmentEntity.RecruimentEntity.RecruimentJobPost", b =>
                {
                    b.Navigation("recruimentApplications");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Curriculum", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Degree", b =>
                {
                    b.Navigation("Curricula");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Evaluation", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.ModuleOffering", b =>
                {
                    b.Navigation("Evalutions");

                    b.Navigation("FirstExaminers");

                    b.Navigation("Registrations");

                    b.Navigation("SecondExaminers");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Person", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("RecruimentsApplications");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Semester", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Student", b =>
                {
                    b.Navigation("Semesters");

                    b.Navigation("StudentRequests");
                });

            modelBuilder.Entity("ERP.Domain.Core.Entity.StudentEntity.Teacher", b =>
                {
                    b.Navigation("CordinatingModules");

                    b.Navigation("FirstExaminersModules");

                    b.Navigation("SecondExaminersModules");

                    b.Navigation("TeachingModules");

                    b.Navigation("WorkingTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
