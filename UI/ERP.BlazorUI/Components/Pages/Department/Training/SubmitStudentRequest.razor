@page "/submit/{Id:int}"


<h3>SubmitStudentRequest</h3>

@using System.IO
@using System.Text
@using System.Threading
@using ERP.Application.DepartmentApp.Training.Interfaces
@using ERP.Application.DepartmentApp.Training.Usecases
@using ERP.Application.StudentApp.Students.Interfaces
@using ERP.Domain.Core.Entity.DepartmentEntity.TrainingEntity
@using ERP.Domain.Core.Entity.StudentEntity
@using FluentValidation
@using Microsoft.EntityFrameworkCore

@inject IStudentRequestCreateUseCase StudentRequestUseCase;
@inject IViewStudentById ViewStudentById 

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<h3>Submit Student Request</h3>

<EditForm Model="@studentRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudTextField @bind-Value="studentRequest.StudentId" Label="Student ID" Disabled></MudTextField>
     <MudTextField @bind-Value="studentRequest.CompanyName" Label="Company Name" Required></MudTextField>
     <MudTextField @bind-Value="studentRequest.CompanySendersName" Label="Sender's Name" Required></MudTextField>
     <MudTextField @bind-Value="studentRequest.CompanySendersDesignation" Label="Sender's Designation" Required></MudTextField>

     
     <MudButton OnClick="@(async () => await HandleValidSubmit())" Color="Color.Primary">Add</MudButton>

 </EditForm>

 @code {
    [Parameter]
    public int Id { get; set; }

    private StudentRequest studentRequest = new StudentRequest();

  


    protected override async Task OnInitializedAsync()
    {
        studentRequest.StudentId = Id;
      
    }
  

    private async Task HandleValidSubmit()
    {
        try
        {
            await StudentRequestUseCase.ExecuteAsync(studentRequest); 
            Snackbar.Add("Request submitted successfully!", MudBlazor.Severity.Success);
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", MudBlazor.Severity.Error);
        }
    }



}


