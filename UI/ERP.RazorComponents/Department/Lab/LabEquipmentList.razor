
@using ERP.Application.DepartmentApp.Labs.UseCases.Inventor_Lab
@using ERP.Domain.Core.Entity.DepartmentEntity.LabEntity
@using ERP.Application.DepartmentApp.Labs.Interfaces;
@using ERP.Application.DepartmentApp.Labs.UseCases;
@using ERP.Application.DepartmentApp.Labs.Interfaces.Inventory_Lab;

@inject NavigationManager NavigationManager
@inject IGetLabEquipmentListUseCase GetLabEquipmentlist
@inject IDialogService DialogService

@if (_labEquipments == null || _labEquipments.Count == 0)
{
    <p>No graduates to show.</p>
}
else
{   

    <MudTable Items="@_labEquipments">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Condition</MudTh>
    
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Nr">@context.LabEquipmentID</MudTd>
            <MudTd DataLabel="Sign">@context.LabEquipmentName</MudTd>
            <MudTd DataLabel="Name">@context.condition</MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    
}

@code {

    private List<string> LabEquipmentName { get; set; } = new List<string>();
    private List<LabEquipment> _labEquipments = new List<LabEquipment>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var labEquipmentList = await GetLabEquipmentlist.ExecuteAsync("");
            if (labEquipmentList != null)
            {
                _labEquipments = labEquipmentList.ToList();
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error: {ex.Message}");
        }
    }
  




            

}



 