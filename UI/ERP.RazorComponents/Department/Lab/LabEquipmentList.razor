
@using ERP.Application.DepartmentApp.Labs.UseCases.Inventor_Lab
@using ERP.Domain.Core.Entity.DepartmentEntity.LabEntity
@using ERP.Application.DepartmentApp.Labs.Interfaces;
@using ERP.Application.DepartmentApp.Labs.UseCases;
@using ERP.Application.DepartmentApp.Labs.Interfaces.Inventory_Lab;

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IGetLabEquipmentListUseCase GetLabEquipmentListUseCase
@inject NavigationManager NavigationManager


@*<MudSelect T="string" Label="Select a Lab Equipment" AnchorOrigin="Origin.BottomCenter" @bind-Value="SelectedLabEquipment" OnValueChanged="HandleLabEquipmentSelection">

    @foreach (var LabEquipmentName in LabEquipmentName)
    {
        <MudSelectItem Value="@LabEquipmentName">@LabEquipmentName</MudSelectItem>
    }
</MudSelect>

<MudCardActions>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async ()=>await LoadLabEquipmentAsync(SelectedLabEquipment))">Search Lab Equipment</MudButton>
</MudCardActions>*@

@if (_labEquipments == null || _labEquipments.Count == 0)
{
    <p>No graduates to show.</p>
}
else
{   

    <MudTable Items="@_labEquipments">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Condition</MudTh>
    
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Nr">@context.LabEquipmentID</MudTd>
            <MudTd DataLabel="Sign">@context.LabEquipmentName</MudTd>
            <MudTd DataLabel="Name">@context.condition</MudTd>

                <MudTd DataLabel="">
                    <MudFab OnClick="@(()=> EditLabEquipment(@context))" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    
}

@code {

    @*private List<string> LabEquipmentName { get; set; } = new List<string>();*@
    private List<LabEquipment> _labEquipments = new List<LabEquipment>();
    @*private string SelectedLabEquipment { get; set; }*@

    protected override async Task OnInitializedAsync()
    {

        _labEquipments = (await GetLabEquipmentListUseCase.ExecuteAsync("")).ToList();

    }

    async Task EditLabEquipment(LabEquipment labEquipments)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditLabEquipmentDialog.labEquipment), labEquipments);


        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };


        var dialog = await DialogService.ShowAsync<EditLabEquipmentDialog>("Save", parameters, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            // Handle when the dialog is not canceled
        }
    }



   @* private async Task HandleLabEquipmentSelection(string selectedValue)
    {
        SelectedLabEquipment = selectedValue;
        await LoadLabEquipmentAsync(selectedValue);
        StateHasChanged();
    }

private async Task LoadLabEquipmentAsync(string labEquipment)
    {
        try
        {
            var labEquipmentList = await GetLabEquipmentListUseCase.ExecuteAsync(labEquipment);
            if (labEquipmentList != null)
            {
                _labEquipments = labEquipmentList.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lab equipment: {ex.Message}");
            // Handle error appropriately, show error message to the user, etc.
        }
    }

*@




}



 