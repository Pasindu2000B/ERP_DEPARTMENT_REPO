
@using ERP.Application.DepartmentApp.Labs.UseCases.Inventor_Lab
@using ERP.Domain.Core.Entity.DepartmentEntity.LabEntity
@using ERP.Application.DepartmentApp.Labs.Interfaces;
@using ERP.Application.DepartmentApp.Labs.UseCases;
@using ERP.Application.DepartmentApp.Labs.Interfaces.Inventory_Lab;

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IGetLabEquipmentListUseCase GetLabEquipmentListUseCase
@inject IDeleteLabEquipmentUseCase DeleteLabEquipmentUseCase
@inject ISnackbar Snackbar


@if (_labEquipments == null || _labEquipments.Count == 0)
{
    <p>No graduates to show.</p>
}
else
{   

    <MudTable Items="@_labEquipments">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Condition</MudTh>
    
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Nr">@context.LabEquipmentID</MudTd>
            <MudTd DataLabel="Sign">@context.LabEquipmentName</MudTd>
            <MudTd DataLabel="Name">@context.condition</MudTd>

                <MudTd DataLabel="">
                    <MudFab OnClick="@(()=> EditLabEquipment(@context))" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    <MudFab OnClick="@(()=> DeleteLabEquipment(@context))" Color="Color.Warning"
                            StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Are You Sure to Delete This Graduate!
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
        </YesButton>
    </MudMessageBox>
}

@code {

    private List<LabEquipment> _labEquipments = new List<LabEquipment>();
    MudMessageBox mbox { get; set; }
    public EventCallback onDelete { get; set; }
  

    protected override async Task OnInitializedAsync()
    {

        _labEquipments = (await GetLabEquipmentListUseCase.ExecuteAsync("")).ToList();

    }

    async Task EditLabEquipment(LabEquipment labEquipments)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditLabEquipmentDialog.labEquipment), labEquipments);


        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };


        var dialog = await DialogService.ShowAsync<EditLabEquipmentDialog>("Save", parameters, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            // Handle when the dialog is not canceled
        }
    }

    async Task DeleteLabEquipment(LabEquipment labEquipments)
    {
        bool? result = await mbox.Show();
        if (result == true)
        {
            _labEquipments.Remove(labEquipments);
            StateHasChanged();
            await DeleteLabEquipmentUseCase.ExcuteAsync(labEquipments);
            await onDelete.InvokeAsync();
            Snackbar.Add("Graduate Deleted Successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Graduate is Not Deleted", Severity.Info);
        }

    }


   




}



 